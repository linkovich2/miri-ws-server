// Code generated by go-bindata.
// sources:
// json/aesthetic_traits.json
// json/backgrounds.json
// json/entities/krajafic.json
// json/functional_traits.json
// json/genders.json
// json/races.json
// json/world/chaos.json
// json/world/fae.json
// json/world/light.json
// json/world/miri.json
// json/world/shadow.json
// json/world/world.json
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsonAesthetic_traitsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xd1\x6e\xea\x38\x10\x7d\xef\x57\x58\x3c\x67\x57\xda\xd7\x7d\x4b\x20\xb4\xd5\x0d\x05\x25\xa0\x55\x75\x75\xb5\x72\x62\x43\x7c\x71\x6c\xd6\x76\x8a\xd0\xaa\xff\xbe\xe3\x24\x40\x1a\x6c\x56\xe4\xbe\xa0\xd6\xf1\x78\xce\x9c\x39\x67\xec\x7f\x9f\x10\x9a\xbc\x84\xaf\xe9\x74\x99\x2c\xd3\xc9\x9f\xc8\x2e\xc0\x12\x23\xf0\x77\xef\x43\xd0\x2e\x0b\x5c\xd1\xe6\x03\x66\x0a\x4d\x25\x97\xea\xfc\xa5\x16\xec\x9f\xda\x7e\x33\xaa\xa6\xdd\x5a\xc5\x04\x2c\xfc\xd1\xfd\x67\x14\x66\x46\x5f\x52\xc0\x4a\x94\x2e\xff\x7a\xeb\x2d\xf4\x12\x44\x4a\x1e\x45\x77\x76\x0f\x50\x1b\xd1\x5b\x26\x54\x17\x8a\x1d\x0c\x93\x36\xd5\xe4\xfb\x4a\x6a\x4d\xb5\x66\x1f\x74\xa5\xa4\x90\xb5\xf8\x81\x4a\x8b\x95\x69\x94\xdb\x23\x7f\x9f\x74\xb1\x9f\xc1\x05\x45\xb2\x7c\x9b\xc5\x1e\x18\x5c\x0a\x42\x1d\x38\xda\x98\xb1\x40\xd8\xae\x34\x28\x6f\xce\x76\x00\x7a\x4e\xe3\x77\x37\x9c\x67\x45\x4f\xb7\x60\x9a\xfd\xe3\xa0\xec\xe0\x40\x84\x05\x41\xba\xe6\x9c\xba\xd9\x09\xa7\xdf\x7c\xe4\xe0\x62\xef\xe2\xc6\x46\x8c\xc3\xf3\x93\x5a\x5e\xe0\x58\x07\x92\x34\x9e\xb9\x71\xa4\x94\xdc\xa2\xb0\xbb\xc7\x61\x50\x94\x5c\xb3\x3f\x9d\x7f\x1b\x1c\x8d\x21\xb2\xf5\x7b\x12\xbb\x9c\xd2\x7e\x70\x39\x25\x33\x27\x4e\x7f\xc5\x29\x8b\x38\xcb\xde\xa3\x8d\xc7\x2c\x0b\xa8\xe4\x84\xa2\xda\x61\x98\x4b\x60\x9f\x0b\xa6\x31\xe7\xf2\x48\xc9\xdf\x3b\x0a\x12\x54\x36\xd5\xf7\xc9\x62\xf2\x63\x1c\x61\x5c\x4a\x4d\x39\xe8\x48\x29\x2c\x76\x94\x20\x26\x10\x46\x79\x0d\xbf\xb9\xfc\xa0\xc8\x19\x4b\x31\x09\x90\x86\x4a\x05\xd1\x68\x0b\x78\x98\xd8\xd9\xfd\xb5\x41\x95\xdd\xcb\x4f\x0e\x09\x80\xeb\x9e\xb3\x75\x1a\xbe\x3e\xbf\xac\xdd\x54\x24\x52\xec\x02\xe0\x1b\x18\x04\x8f\xdd\xf2\xf1\xe5\x84\xb1\xe5\x5a\xa4\xd6\x33\x5d\x96\x00\x24\x83\x8b\xd2\x16\xf0\xb3\xd6\x20\x60\x0a\xe4\x3a\xab\xd6\xa5\xac\xb9\x25\xdc\x51\x5b\xf6\xb2\x4c\x3d\x45\x65\xa5\x54\x8e\x5a\xda\x88\x71\x45\xec\xe9\xc1\x20\x41\xb1\x81\xbe\x15\x1c\xfa\x87\x8c\xbc\xd3\x28\x0e\xab\xc8\x94\x54\xc0\x01\x7c\x0b\xd5\x43\x8f\x8b\xb2\xa1\xc2\x35\x33\xc2\xc4\x63\xd5\x08\x73\x87\x57\x9b\xfd\x0f\xd6\x01\xb0\x9a\x59\x0a\x07\xb6\xcd\x00\xfe\x4f\x5e\xdf\xce\xc3\xe9\x6b\x98\x58\x93\x0e\x8d\xdb\xfb\x32\x70\xee\x1c\x17\x0c\x73\x64\x0d\x7c\xcf\xba\x3d\x37\x29\x5c\xd0\xd6\x4b\x71\x32\x3f\xbb\xc9\x67\xb7\xeb\x86\x5b\xbb\x5b\x95\x46\x20\xd2\x59\x3c\x8b\xe2\x30\xf5\x90\xd9\x6a\x3d\x87\x68\x02\xa6\xcb\x29\x56\x0e\x6e\x6f\x8e\x7a\x8c\xe7\x2d\x94\x64\x79\x96\xb9\x2e\x6a\x65\xd3\x80\xcf\x9b\xbe\x07\x20\x01\xa3\x58\x81\x8d\xf5\xfe\x17\x14\x2e\x75\xaf\x37\x51\x94\x78\x6e\xd9\xcc\xd4\x79\xce\x1d\xd7\xec\x39\xca\x8f\x39\x44\x15\x23\x04\x9f\xa0\xff\x98\x80\xeb\xc0\x61\x47\xed\x14\xf2\x11\x90\x31\x61\x75\xbc\x55\xb2\x82\x0e\xe2\x0f\xca\x03\x24\x95\x73\xb7\xbd\x83\x90\xdc\xc2\x05\x29\x65\x65\x9d\x5d\xe2\x1c\x9a\xe4\x15\x18\x34\x1c\xd8\xcd\x86\xea\x3a\x2f\x0f\xa4\x15\xe3\x87\xef\x04\x29\xf8\xa9\x3b\x71\x72\x57\x37\x9b\xd5\x3d\xb5\xac\x24\x74\x0d\xfa\xb4\x39\xb8\xa5\x02\xd1\x8f\x09\x04\x58\xd5\x30\xf9\xe9\x75\x2c\x1e\x6c\x0a\x54\x1f\x8e\xa0\x04\xef\xa0\xf3\xa1\x6c\x46\xdd\x7d\x98\xe7\xf8\x91\x38\xb5\xcd\x70\x0f\xe8\xa0\xb3\x8b\xd7\x6c\x3a\x6c\x6b\xb3\x36\xe8\xe9\x82\xe9\x82\x72\x8e\x05\x95\xb5\xbe\xe9\x2b\xdc\x70\x9a\x7a\xfb\x36\x4f\xe3\xe9\xb7\x24\xce\xdc\x9c\xcc\x15\x2d\xf6\x30\x81\x6f\xa9\xb8\xc4\xf9\xb9\x38\x07\x77\xaf\x3c\x81\xf4\x41\x1a\x8d\x88\x34\xee\x1b\x6a\xcf\x5c\xaf\x40\x78\x4d\xbd\x2d\xb3\x3b\x0f\xb0\xdf\xde\xe0\x0e\x71\x3f\xc3\xda\xc0\xc7\xba\x25\xec\x8d\xd4\xbe\xc5\x02\x74\x50\x32\xc7\x39\x0c\x99\xc6\xb8\x04\x5c\xbc\xb7\x8e\x34\x52\xa2\xaa\x2e\x4a\x97\xc4\xa6\x61\x0a\x99\x61\xb6\x7b\x26\x4e\x37\xdb\xb3\x02\x54\xe1\x50\x58\x2f\x7c\xdc\xb8\xac\xb0\xda\x83\x7c\x61\xb8\x68\x48\xf1\xe5\x45\x39\x04\x19\x2d\x67\x9e\xd7\x7e\xd6\x86\xa2\x48\x12\xc7\xab\xbf\x1f\xfe\x18\xc8\x1c\xce\xfb\x1f\x90\x57\x0f\x3c\x7d\x3e\xfd\x17\x00\x00\xff\xff\xd5\xdd\x09\x37\x24\x0e\x00\x00")

func jsonAesthetic_traitsJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonAesthetic_traitsJson,
		"json/aesthetic_traits.json",
	)
}

func jsonAesthetic_traitsJson() (*asset, error) {
	bytes, err := jsonAesthetic_traitsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/aesthetic_traits.json", size: 3620, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonBackgroundsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\xd2\x51\x6b\xdb\x30\x10\x07\xf0\xf7\x7c\x8a\xc3\xcf\x59\x61\xaf\x7d\x53\x1a\x67\x15\x6d\x92\xe2\xb9\x30\x08\x21\x68\xf6\x35\x16\x95\x25\xed\x24\x6d\x84\x91\xef\x3e\x29\x73\xb2\x39\x4d\xfb\x10\x30\x81\x18\xeb\x4e\x77\x7f\x7e\xf8\xf7\x08\x20\x5b\x2c\xe7\x6c\xfa\xc0\x38\x2b\x58\x76\x0b\xe9\x28\x1e\x6a\xd1\x62\x7c\xcb\x16\xa6\x15\x35\x7c\x82\x32\x28\xa9\x35\xc2\x14\x1d\x92\xcf\xc6\x7f\xbb\x64\x7d\xe8\xf9\x6f\x40\x57\xa8\xd1\x55\x24\xad\x97\x46\xa7\x8e\xd5\x13\x19\x6d\x82\x5e\xc3\x8a\x3b\x46\xb8\x06\x01\x3a\x4d\x1e\x43\x15\x88\x50\x7b\xb5\x03\x4f\xe2\x27\xc6\x2d\x5b\xf0\x0d\x99\xb0\x6d\xe2\x13\xcf\x16\xdf\x1c\x17\x08\xa5\xcc\xaf\x4d\xfc\x8f\xe3\x3d\x05\xec\x8e\x9d\x17\xe4\x37\x84\x42\xb5\x69\xef\x9c\x17\x3c\xeb\x95\xac\x71\xf2\x98\xea\xf3\x6d\xfc\x65\xb1\xba\x1f\x9f\x1c\xf2\xc7\xe9\xb2\xc8\xf9\xfb\x10\x5f\x85\xb5\x8d\x24\x84\x3b\x23\xdc\x25\x88\xe3\x84\x77\x24\xf8\xe2\x6e\x39\x7f\x7a\xcc\xcb\x3c\x62\x5c\xcf\xd2\x8f\x31\x38\xcb\x6c\xf9\x2d\x67\xc5\x07\x2a\x86\x0c\xcc\x24\xaa\xda\x5d\x20\xe9\x6e\x0f\x2c\xf2\x2f\xc2\xe0\x1c\x93\x82\x17\x79\xfe\x01\xc7\xeb\xce\xa5\x68\x35\xcc\x0c\xe1\xc5\xcf\xa4\x1b\x31\xb0\xc9\x59\x8e\x21\x61\x26\xec\x9e\xcd\x9f\xcb\x87\x05\xff\x72\x5f\xbe\xa5\x29\xb1\xb5\x0a\xc1\xbc\xc0\x44\x34\xa2\x0d\x3e\x32\x3d\xeb\x1a\xc9\xf9\x50\xef\xfa\x40\xfd\x51\xd7\x11\x69\x08\xa7\xe9\x20\xfc\x81\xc3\x9f\x67\x18\x83\x45\x6a\x84\x75\x20\x75\x22\x94\xfa\x20\x68\xe0\x3b\x46\xe4\x57\x2d\xb7\x8d\x07\x43\x50\x29\x24\x59\xdd\x64\xd7\x33\x75\x65\x4b\x48\xf8\x23\xc8\x58\x46\x77\x42\x8a\x85\x97\xa0\xab\x74\x43\xa8\x4d\xca\xe1\x53\x71\x75\x84\xc8\xd6\x87\xb6\x7d\xb2\x1e\xed\x47\x7f\x02\x00\x00\xff\xff\x6d\x91\x6f\x37\xb6\x05\x00\x00")

func jsonBackgroundsJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonBackgroundsJson,
		"json/backgrounds.json",
	)
}

func jsonBackgroundsJson() (*asset, error) {
	bytes, err := jsonBackgroundsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/backgrounds.json", size: 1462, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonEntitiesKrajaficJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x6f\xdb\x46\x10\xbd\xfb\x57\x8c\xf7\x92\x8b\x20\x17\xed\x2d\x11\x0c\x30\xb2\x02\xab\x8e\x65\x43\x56\x6b\x18\x8d\x21\x8c\xc8\x21\xb9\xd0\x72\x97\xdd\x0f\xab\x44\x91\xff\xde\xd9\xa5\x3e\xea\xd8\xb1\x8d\x1e\x8a\x5c\x2c\x73\x77\x38\x6f\xe6\xcd\x7b\xc3\xbf\x8f\x00\xc4\xc5\x3c\xfb\x35\xfb\x34\x1d\x2f\x2f\x27\xf3\xf1\x79\x36\x5b\x2c\xc7\xf3\xab\xdb\x33\xf1\x1e\xe2\x35\x07\x68\x6c\x88\x9f\xc4\xd8\x9a\x4d\x01\xa6\x84\x4b\xb2\x79\x8d\xda\xbb\x93\x85\xc5\x82\xac\x13\x83\x3e\x72\x45\x35\x3e\x48\xc3\x07\xef\xe1\x0f\x91\xd2\x2c\xc7\x57\xb3\xdf\x27\xf3\x9b\x6c\x31\xbd\x9a\x89\xfb\x6d\x60\x6b\x4d\x4b\xd6\x4b\x4a\x91\xe9\x0c\xf6\xbf\x7c\x9f\x1b\xfd\xc0\x79\xd1\x4b\xa3\xb7\xc9\xd3\xf9\x9d\x09\x60\xf8\xa6\x26\xb4\x80\x50\x48\x57\xd9\xa0\xbd\xa2\x02\xf2\xe0\xbc\x69\xc8\x0e\xe0\x8b\x18\x39\xec\x4e\x63\x6c\x8e\x5a\x1b\x0f\x2b\x02\x47\x56\x9a\xe0\x8e\x61\x51\x93\x23\x68\xad\xcc\xc9\x01\x5a\x02\x13\xbc\xc5\x8a\xf8\x72\x38\x3a\x89\x2f\x7e\x11\x1f\x3e\x70\x14\xf8\xd4\x1c\x58\x6a\x15\x17\xba\xcf\xfb\x11\xeb\x01\x6c\x6a\xf4\xb0\x31\x41\x15\xd0\x31\xce\x5a\x9b\x0d\xe0\x8a\x53\x41\x19\x2c\xe7\x75\x50\x4a\x4d\xf1\xd7\x47\xbc\x61\x84\xed\x41\x41\xa6\xb3\xfe\xe1\x78\x87\x28\xb6\x3d\xde\x0f\xde\x4e\x46\x06\x2e\x58\xd5\x0d\x80\x1b\x67\xe0\x06\x35\x70\x32\xce\x6e\x00\xb9\xeb\x9a\x6b\xef\x5b\xd8\x97\x1e\x8b\x28\x71\xc5\xc8\x0e\x32\xf5\xce\x07\x0b\xce\x70\x0b\xc1\xc1\x46\x2a\x05\x25\xf9\xbc\x86\xc2\x84\x95\xe2\x3a\x35\x5c\x90\xe2\xc2\xb1\x93\xee\xc0\xcc\x75\xf6\xdb\xcd\xe4\x45\x82\xee\xe2\xff\x0c\xdf\x25\x7a\xb9\x2a\xfa\x2b\x27\xa5\x48\xc7\x1a\xd7\xcc\xc5\x35\x0f\x10\x5b\x07\xd3\x1e\x35\xb7\x84\x9e\x03\xc1\x1a\x1e\x54\x69\x4d\x13\xdf\x6e\xa0\x34\x16\x9a\xce\x91\x2a\x87\xc3\x6f\x46\x73\xe8\xd8\x92\x6b\x8d\x2e\x0e\xe8\x67\x46\xbf\xf3\xcc\x41\xc8\xeb\x63\xd8\x6a\x80\x0f\x2a\xc3\x6a\xa9\x2a\xa9\x2b\x6e\x8c\x19\x32\xb1\xf7\xd0\xb6\xaa\x03\x25\xd7\x94\xa6\x58\xc8\x82\x2b\xf2\x75\x9a\xcf\x88\x9a\x53\x96\x53\xce\x0d\x2a\xc2\x72\x74\xc2\xcf\xcf\x0b\xa4\x42\xd7\x1e\xf0\x67\xac\x37\x67\x40\x99\x50\x70\xd9\x70\xc3\x9a\x34\xac\x84\x46\x56\xb5\x87\xa4\x5b\x86\xda\xcf\x1d\xce\x89\x43\xcd\x3a\x4a\xd1\x04\x5d\x80\x26\xfb\xc0\x52\x54\xdd\xf0\xa9\x24\x44\x69\xe9\xcf\x40\x3a\xef\xc4\x00\xc4\xcf\x3f\x89\xfb\x74\x13\xff\x7e\x1d\x3c\xb2\xf2\x6d\xb6\x98\xcc\x97\xb7\x93\xcf\x9f\x9f\xda\xf8\x96\xc9\xb6\x70\x1d\x9a\x56\x3c\xeb\xc6\x9d\x47\x99\x26\xb2\x98\x47\xd5\xf5\x7e\x3e\x9b\x4f\x67\x17\xcb\x4f\xf3\xab\x4b\xf1\x0c\xe4\xcd\x79\x76\x76\xf7\xea\x0e\xf9\xdf\x36\x45\xb6\x9b\x4e\x1d\xf7\x85\x4b\x5b\x83\x25\xe6\x1a\x64\xc5\x79\x64\x81\x7f\xa3\x18\x45\x9e\xb5\xda\xc5\x59\x39\xa2\x24\x81\xa6\xdf\x73\xbc\x65\x7a\x03\x77\x90\x27\xc7\xb3\x4a\x37\xc6\xae\xa3\x96\xa2\x46\x2f\x50\xc2\xc4\xe2\xf0\xfb\x5e\x7e\x3c\xb8\x5f\x5e\x18\x5c\x76\xf9\x71\x9a\xcd\xc6\x93\xa7\xcc\x65\xcd\x4a\xa2\xce\x69\xc7\x20\x3b\x7c\xf9\x20\x9d\xe4\x4e\xf8\xda\xdb\x40\xcf\x52\xbb\x4f\xf8\x32\xa1\x02\xf7\xe9\x41\x8c\x76\x0f\xa7\xd1\x04\xc9\x6f\xcc\x82\x63\xd7\x49\x1b\xd7\x42\xe4\x66\x23\x75\x91\x6c\xc9\x11\xa3\x93\xfd\x0b\xe2\x5f\x4d\x7f\x3f\xe5\xd6\x96\xbd\x1d\x62\x36\xcf\xcb\x81\x57\xa6\xc2\xb6\xed\x1d\x7a\xc0\xf8\x6f\x08\xa9\xe8\xa0\x79\x54\xc8\x89\x0b\xb3\xd1\xbb\xef\xc6\x6b\x55\xbf\xe6\xb1\xbd\xc2\x7f\xd4\x51\xc5\x35\xe2\xe2\x67\xba\xc6\xaa\x52\x91\xce\x66\xf7\xbd\x8e\x1f\x8c\x7e\xcd\xf0\x0e\x7a\x3b\x0b\x8f\x05\x7b\xf4\xf5\xe8\x9f\x00\x00\x00\xff\xff\x05\xdd\x95\x91\x38\x08\x00\x00")

func jsonEntitiesKrajaficJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonEntitiesKrajaficJson,
		"json/entities/krajafic.json",
	)
}

func jsonEntitiesKrajaficJson() (*asset, error) {
	bytes, err := jsonEntitiesKrajaficJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/entities/krajafic.json", size: 2104, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonFunctional_traitsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\x46\x3e\x37\x51\x7b\xed\xcd\x09\x18\xac\xf2\x51\x19\x92\x1c\x10\xaa\xa6\x78\xc0\xa3\x98\x5d\x32\xbb\x26\x42\x55\xfe\x7b\x77\xb1\x1d\x4c\xed\x24\xca\xa9\x17\xc4\xbe\xdd\x7d\xf3\xde\xf3\xdb\x3f\x3d\x80\x20\x19\x8c\xe3\x61\x3c\x9b\x06\xdf\xc1\xaf\x1d\xa2\x70\x47\x6e\x15\x24\x94\xf3\x96\xb5\x0a\xbe\x94\x38\xa7\x27\xb4\x3e\x5f\xa1\x85\xe2\xa7\xc2\x9f\xb7\x52\x50\x85\x59\x41\xb6\xe6\x95\xd1\x21\x37\xe1\x28\x9c\xdc\x2d\x1a\x50\x63\x50\xa4\xf3\x5c\x3f\x93\x80\xde\xc0\x0d\x66\x58\xec\x0a\x5b\xd1\x37\x06\xd7\x14\x8d\x8d\x94\xcc\x5a\x78\x6f\xbd\x48\x77\x62\xf9\x53\xb4\xd2\x85\x5a\xc1\x32\x36\xa1\xd0\x0a\x10\x36\x0d\xee\x45\x46\x30\xd4\xa9\xff\x3b\xe6\x6d\x76\x31\x63\xaf\x59\x9d\x24\x07\x57\xdf\x82\x0a\x7e\xa9\xf7\x83\xc9\x2c\x49\x46\xf1\x30\x9c\x76\x1b\x78\xd0\x62\x32\xde\xef\xcb\x31\x13\x2d\x92\xf1\x16\x55\xdb\xc3\x99\xe7\x73\x2e\x9e\x2f\x06\x54\x3e\xdc\x3d\xe3\x97\x7d\x42\x9b\x7d\xe8\xa5\x57\xff\x9e\x5c\x05\x49\x78\x1b\x87\xe3\xf6\x47\x8f\x55\x46\x42\xca\x42\x82\x6b\xc6\x1c\xc2\xdf\x9c\xb3\x3d\xfe\xd3\x81\xf2\x72\x85\xa5\x6c\xf0\x14\x72\xfa\x4b\x70\x4d\x7e\xf0\x32\x18\xdd\x4d\x9c\xcb\xd5\x9b\x85\xe8\x87\xc9\x8f\xfb\x78\xde\x2c\xde\x85\x8e\x3e\xca\xe3\x81\xcd\xb9\x7e\x8d\xf1\x8d\xbb\xef\xc5\xa8\x8d\x71\x09\xf1\x81\x5e\x03\x2d\x09\x81\x0d\x6c\x90\x05\xe8\x40\x6e\xa1\x20\xe5\x1d\xe4\xbe\x10\x80\x2a\x85\x3d\x8a\xf5\xce\x53\xa7\x40\x39\x82\xeb\xee\x68\xbf\x36\x61\xa1\xa7\x82\x85\xd2\xea\x19\xb4\xfa\x13\x2d\xa2\x59\x32\x98\x2f\xe6\xdd\x66\xa7\x68\x0b\xf1\x61\x5b\x5b\x28\xda\xf9\xf8\xaf\x20\xd2\x42\xc6\xcd\x6a\xd9\x3f\x93\x35\xb6\xb4\xca\x8f\x7e\x73\x30\x8e\xde\x11\xf6\xb1\x93\xb7\xcb\x38\xc2\x03\x8d\xd0\xb8\x3a\xfa\xd0\x14\x5a\x02\x2c\xcb\x01\x56\x83\xc2\x83\xab\xbc\xc3\x36\xa5\x6c\xd0\xe2\x5a\xab\xd3\xdc\x47\x6a\x49\x5c\x01\xd4\x75\xfb\x61\x45\x8b\xdb\xf0\x7e\x90\x4c\x3f\x13\xcc\xc4\xe9\xb1\x8e\xae\x33\x9a\x9a\xae\x23\x9a\xfe\x43\x98\xfc\xe7\x70\x76\xb5\x74\x1f\x8f\xb6\xee\xa9\x81\xe8\xf5\xe3\xb1\x9d\xd0\xf9\xb9\xf6\x5e\x7a\x7f\x03\x00\x00\xff\xff\x7f\x35\x53\x06\xa9\x05\x00\x00")

func jsonFunctional_traitsJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonFunctional_traitsJson,
		"json/functional_traits.json",
	)
}

func jsonFunctional_traitsJson() (*asset, error) {
	bytes, err := jsonFunctional_traitsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/functional_traits.json", size: 1449, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonGendersJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd0\x31\x4f\x85\x30\x10\x07\xf0\x9d\x4f\x41\x6e\x71\x31\x71\x77\xeb\xc2\x46\x59\x70\x32\xc6\x34\x70\x84\x4b\x4a\x6b\xb8\x22\x31\x86\xef\x6e\x0b\x68\x7d\xaf\xaf\xcb\x9b\xb8\xfb\xff\x8f\xf0\x0b\xdf\x45\x59\x42\x0d\xcf\x65\x18\xfc\x68\xd4\x84\x7e\x83\x5a\x69\x84\xc7\x23\xa3\x7e\x4f\x7e\xd7\x9e\x58\x69\x6d\x57\xec\xdf\x67\xd5\x21\xfb\xf2\x15\xc4\x4b\xdb\xd4\xa2\x6d\x24\xbc\x9d\x67\xe3\x32\x29\x13\x5e\x0c\x8f\x33\xe3\x8e\xd0\x38\x1a\xa8\x3b\x8a\xf8\x8d\x8f\xd9\x1a\xbb\xec\xf7\x63\x0c\x2d\x33\x32\xd3\xe7\x4e\x1a\x89\xc1\xe7\x5b\x28\xa1\x4a\xc9\x15\x4e\x09\xba\xba\x17\xbd\xda\x2c\x7b\xc0\x0c\x9c\xb3\x72\x9c\xa3\x5c\x8a\x94\x2e\x9f\xc4\xa5\x5b\xfe\xed\xd6\xe8\xaf\x90\x44\xeb\x35\x55\x2d\xce\x63\x9d\xcd\x70\x93\xfa\x9f\x98\xdc\x6d\x30\xb9\x87\xe3\x5f\x17\x5b\xf1\x13\x00\x00\xff\xff\x03\x8e\x71\x91\x22\x02\x00\x00")

func jsonGendersJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonGendersJson,
		"json/genders.json",
	)
}

func jsonGendersJson() (*asset, error) {
	bytes, err := jsonGendersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/genders.json", size: 546, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonRacesJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\x51\x6f\x1b\x37\x0c\x7e\xef\xaf\x20\xfa\x92\x97\x4b\x9a\x16\x49\x80\x06\x41\x81\x74\x49\x1b\x60\xcd\x36\xac\xdb\xf2\x58\xd0\x77\x3c\x9f\x16\x9d\x74\x93\x74\xf6\xdc\xa1\xff\x7d\x1f\xa5\x73\xe6\xba\x73\x9b\xc2\x2f\x89\xcc\x93\x48\x8a\xfc\xf8\x7d\xfa\xe7\x09\xd1\xd3\x9b\xdf\x6f\x2f\x7f\x7a\x7a\x4e\xfa\x03\x3f\x4d\x83\xf5\x64\xac\x8a\xc9\x71\x2f\xd9\x38\xf6\xec\xd6\x46\xeb\xdd\xfc\x43\x23\xb1\x0e\x66\x48\xc6\x3b\xdd\x70\x31\xbc\xba\x88\x29\xe0\xcb\xab\x2b\x13\x93\x71\x75\xa2\xb7\xc1\x8f\x43\x3c\xbf\x78\x36\x7d\xa0\xdf\x3a\xa1\x6b\xdb\xf8\x20\xa6\xca\x3f\xde\xf8\xbf\x0f\xaf\x39\xd0\x0f\x96\x5d\xb1\xfc\xc8\xe6\xf0\x32\x70\x45\xec\x9a\x6c\x78\x1d\x4c\x10\xb9\x78\x06\xff\xff\x85\xb8\x1c\x06\xe1\xc0\xae\x96\x73\x7a\x70\xff\x07\x87\x95\x71\x73\x32\x8e\xa2\xf9\x28\x15\xc5\x7b\x2c\xd5\x4f\xc7\x26\x50\xed\xad\x0f\x15\xb5\xc1\xf7\x14\xad\xb8\x46\x02\x25\x4f\x2d\xa7\x8a\x66\xc1\x2f\xdd\xa1\x6e\x93\x46\x8d\x33\x5c\xb1\x81\x87\x99\x1d\xe5\x50\x56\xc5\x38\x0f\xb2\x3a\xda\x4e\x64\x21\x81\xe7\x42\x37\x62\xe6\x5d\xda\x48\xe6\xb5\xa4\xa5\x88\xa3\xd3\x83\x17\x39\x85\xb3\x83\x13\xf2\xc8\xa6\xec\xdf\xe1\xe5\x6e\x97\x97\xe7\xcf\x8f\xb3\x97\x17\xa7\xc7\x76\x16\xbf\xed\xe8\x9d\x69\x25\x0e\xec\xfe\x2f\xa1\xe2\xe9\xf9\xf1\x31\xad\x50\xc3\xb8\xe5\xe1\x17\x09\xd1\x3b\xb6\x26\xad\x3e\x2f\xad\x91\x06\xf5\x18\x13\xea\xd8\xf7\xde\xd9\x15\x71\xc3\x43\xe2\x99\x45\x9d\xb8\x9f\x19\x20\x61\x8c\x15\xf9\x40\x51\x6c\x7b\x58\x8b\x4b\x82\x72\x6e\x57\xec\x06\xe8\xf0\x61\xd3\x79\xc6\x56\x44\x93\x16\xda\x33\x20\x47\x28\xa1\xf1\x0d\xaf\x70\xd3\x96\xde\xb0\x36\x42\x53\xef\x39\xc2\x65\x36\xd6\xde\xfd\x35\x4a\xd0\x76\xeb\x6d\x7a\x33\x0f\x0c\xd0\xcd\x8f\x14\x33\xda\x6c\xb3\x30\xd6\x7c\x64\x85\x67\x24\x0e\x82\x14\x11\x2b\x3b\xb6\x1c\xe6\x12\x93\xe2\x44\x7f\xde\x9a\x60\x0a\xdc\x52\x3e\xea\xc6\x7e\x06\x68\x98\x88\x7b\x68\x39\x2d\x25\xd3\x0b\x9c\x44\x45\x00\x27\x5d\xa4\x0e\xff\x91\x86\x9e\xf7\xf8\x13\x28\x70\x2d\x31\x47\x5f\xe5\x70\x1b\xb9\xa6\xc0\x8d\xe4\x00\x8d\x19\xac\xef\xb9\x5e\x21\x9e\x8d\x5e\xaf\x9c\x6f\x50\x52\x5a\x47\xc6\x11\xb6\xd6\xa8\xbb\xbb\x4e\xb2\xf7\x1c\x0f\x19\x35\xa3\x28\x12\x4b\xa2\x43\x69\x15\x1a\x40\x8e\xd3\x18\x44\x81\x21\x54\xb3\x73\x3e\xa1\x62\x54\x4b\x48\x6c\x9c\xba\xe1\xa4\x77\xa1\x26\x98\x85\x68\xfa\xd2\x57\xd4\x95\xba\xeb\x24\xf0\xc2\xe7\x61\x88\x63\x5d\xcb\xd4\xb3\xf5\xb4\x6f\x0d\xfa\x15\x3c\x84\x88\x96\x20\x73\x71\x23\xda\xae\x6d\x7b\xc0\xc2\xd1\xf6\x31\x1f\xf4\x54\xb7\xc9\x1f\xf3\x3c\x7c\x1f\x8a\xed\x1c\xf5\x19\x05\x1f\x3e\xe9\xd7\xa7\xd7\xef\xde\x6c\x13\x92\x9a\xb6\xe8\xe8\xda\xb6\x7b\x93\xd1\x15\x87\x7b\xb0\x51\x5b\xd1\x9d\xf7\x4d\x59\xbd\xb6\x0f\xcb\x1b\x8c\xa2\xae\x1e\xc3\x3c\xef\x27\x3a\xd1\x1e\xcf\x15\x09\xed\x68\x2b\x5a\x9a\xd4\x51\x6b\xd0\x92\x56\xa6\xfe\xe8\x86\xc1\x1b\x4c\x46\x43\x3a\x7c\xdf\x4d\x27\x27\x07\x13\x13\x9c\x1d\x1c\xef\xc1\x27\x2f\x27\x12\x38\xdb\x9f\x4e\x26\x3e\x39\x3b\xdd\x9b\x4f\xea\x31\x14\x0a\x19\x3c\xb6\x4b\xa6\x92\x8e\x47\xdc\xe0\x0b\xda\xfd\x92\x44\xbe\x82\xd8\xb7\x0f\x1d\x69\xb9\x07\x2b\x30\x56\x71\xc0\xd4\xa7\x91\xed\x0e\xbc\x8a\x5d\xc8\xa3\xf0\x7a\x75\x77\xf9\xeb\x17\x88\x2d\xc6\x2d\xcc\x5e\x2d\x39\xec\x8f\xda\x1b\x63\x2d\x65\x57\x15\xdd\xfa\xd1\xe9\x80\x97\xdf\x8f\x02\x6a\xe7\x03\xe4\x0e\xc5\x1b\xd3\x11\xfd\xdc\x26\x74\x50\x79\x97\x34\x1f\x1d\xe9\x14\x4c\x0d\xae\xd0\xd2\x37\x52\x7b\x90\x2a\x90\x3a\x83\xa3\x66\xbb\xb1\x8f\x80\x6a\x51\xbe\x93\x83\x97\xdf\x2d\x77\xa7\x9b\x72\xf7\xfd\xa0\x7c\x71\x5c\xce\x9f\xec\x0f\xca\x01\x0d\x80\xad\x11\xb0\x79\x8f\x59\xc6\xda\xfa\x95\x42\x08\xf5\x31\x31\x93\x9f\x4a\x5e\x1a\x67\x33\x1f\xdc\xb7\x81\xaa\xbd\x52\x0e\xce\x65\xcf\xb2\xc6\x08\x81\x64\x5b\xb8\x81\xb4\x68\x27\x8a\xc4\x14\x69\x22\x93\x54\x4f\x73\x14\x88\x80\x15\x08\x8b\x7e\x6f\xf1\x6c\x9a\x71\x7d\xbf\xde\xdb\xe5\x48\x46\x19\x1d\x0a\x00\xed\x92\xa2\x46\x07\x08\x33\x58\xd6\x37\x0c\xd3\xc0\x21\xeb\x9e\x70\xdd\xad\xf5\xab\xe7\x3f\xe1\x1a\x59\x45\x05\x00\xfc\x02\x76\xd1\xf7\xb2\xfe\xae\x0c\x86\x90\xd8\x80\xf1\x84\xa2\xe9\x1e\x6f\xef\xf1\x98\x12\x5a\x42\xe1\xa9\x99\x6e\x74\x48\xe8\x07\x8a\x02\xf1\x82\x06\xd6\x40\x4f\xa3\xea\x56\xf4\x6a\xda\xa5\xb7\xad\x3b\x15\xa1\x23\xba\x65\xb7\x2a\x65\x88\x89\xef\x65\xad\xbf\xb5\x65\xd3\x6f\x8a\xb3\xde\x10\x79\x9b\x88\xbb\x55\x39\xb5\xd4\xa9\xe3\x66\xb3\x92\xe8\x93\x7a\xd7\xb7\x9b\x7c\x96\x47\x23\x03\xea\x05\xb4\x7f\x36\x2d\x7a\x4e\x65\xfa\xde\xe1\xe1\x97\x4b\x5f\x82\x73\xcf\x1f\xd5\xf7\x52\x78\xf0\xe5\xf1\xc8\xa1\xd7\x06\xf7\x60\x73\x84\x5f\x76\x06\x7a\xfb\x30\x85\xbb\xfc\xd4\x23\xb0\xe1\xe4\x6b\x42\xfa\x3e\x79\x53\x57\x2a\xbf\xa3\xbe\x63\x26\x5c\xed\xe0\xa3\xa9\x7a\x3b\x18\xa9\xc5\x6b\x22\x53\xd2\x93\x4f\x4f\xfe\x0d\x00\x00\xff\xff\x7e\x02\x8c\x19\xd9\x0b\x00\x00")

func jsonRacesJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonRacesJson,
		"json/races.json",
	)
}

func jsonRacesJson() (*asset, error) {
	bytes, err := jsonRacesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/races.json", size: 3033, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonWorldChaosJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xe5\x02\x04\x00\x00\xff\xff\x06\xb0\xa1\xdd\x03\x00\x00\x00")

func jsonWorldChaosJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonWorldChaosJson,
		"json/world/chaos.json",
	)
}

func jsonWorldChaosJson() (*asset, error) {
	bytes, err := jsonWorldChaosJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/world/chaos.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonWorldFaeJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xe5\x02\x04\x00\x00\xff\xff\x06\xb0\xa1\xdd\x03\x00\x00\x00")

func jsonWorldFaeJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonWorldFaeJson,
		"json/world/fae.json",
	)
}

func jsonWorldFaeJson() (*asset, error) {
	bytes, err := jsonWorldFaeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/world/fae.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonWorldLightJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xe5\x02\x04\x00\x00\xff\xff\x06\xb0\xa1\xdd\x03\x00\x00\x00")

func jsonWorldLightJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonWorldLightJson,
		"json/world/light.json",
	)
}

func jsonWorldLightJson() (*asset, error) {
	bytes, err := jsonWorldLightJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/world/light.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonWorldMiriJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\xc1\x6e\x1b\x37\x10\xbd\xfb\x2b\x06\x7b\xc9\x45\x36\x2c\xa3\xe8\xc1\x37\xd9\x56\xe1\xc4\x89\x0d\xd8\x02\xdc\xb4\x08\x0c\x6a\x39\xd2\x12\xdd\x25\x55\x92\x2b\x43\x09\xf2\xef\x7d\x43\xee\x4a\x32\x10\xd9\x52\x7a\xc8\x45\x2b\x92\x33\xc3\x99\xf7\xde\x0c\xbf\x1d\x11\x15\xc3\xf3\xd3\xf3\x61\x71\x4e\xb2\xc0\xd2\xaa\x86\xb1\x2a\x6e\xbc\xa2\x0f\x6a\x66\x4a\x9a\x78\xa5\xd9\x87\x77\x74\xd7\xc6\x85\x0b\x91\x8e\xe9\xc1\xb5\xb1\x62\x6f\xe9\x42\x7d\x55\xca\x17\x83\xec\xab\x39\x94\xde\x2c\xa2\x71\x56\x42\x4c\x2a\x26\xd6\x73\x26\x37\x23\x98\xd3\x34\x19\xc3\xbd\x61\x5f\x56\xca\xc6\x40\xa5\x6b\x98\x94\xd5\x34\x77\xa4\x1a\x67\xe7\xc9\x30\xb2\x9c\x4d\x95\x8f\xec\x0d\xf6\xe6\xce\xe9\x90\xcc\x02\xfb\xa5\x29\x39\x9c\xd0\x85\x37\xf3\x2a\x92\xf3\xca\xce\x73\x88\x69\xdd\xf6\xae\x8d\x8a\x65\x95\x42\xd5\xae\x54\x35\x69\xcf\x01\x3e\x48\xc8\x33\x99\x40\xa1\xc5\xb1\xa2\xa5\xf2\x86\xe3\x4a\xf2\x0b\x0d\xd7\x75\xa0\x99\x77\x0d\x05\x87\x00\x76\x45\xda\xcc\x66\x70\xb0\x31\x47\xe1\x80\xd4\x83\x24\xbc\xa8\x59\x05\xe4\x3f\x20\x27\x30\xc0\xcd\xb5\x75\x0a\x4f\xa8\x2b\x22\xeb\x54\x32\x70\x93\xec\x4b\xef\x9e\x91\x3e\xae\x75\x5a\xd7\x2b\xa9\x79\xe6\x7c\xc4\xd1\x49\x0f\x1c\x60\x35\x1d\x6a\xdf\x8a\x3f\xf1\x3b\x1c\x50\xf1\x19\xdf\x53\x7c\xff\x92\xf5\xf7\xce\x32\x98\xaf\x42\xcf\x6f\x6b\xc4\xa3\x32\x75\xc0\xce\xdf\x45\x7f\x5f\x82\xa0\x80\xe3\xb4\x23\x07\x5e\xc0\x47\xbe\x31\x53\x59\x7c\xe9\xdc\x61\x89\x7b\x39\xfb\xdf\xdc\x8f\x3e\x8c\xfe\x78\x7f\xf9\xf4\x69\x7c\x7f\x79\x3d\xba\x9d\x3c\x5d\xde\xdf\x3d\x5e\x89\xdf\xfa\x68\xf4\xe9\xe2\xfd\xe8\xf6\x72\x2c\x9b\x6b\xb3\xf5\xe6\x17\x44\x4d\x89\x16\x90\xd4\xc1\xa2\x7a\xe4\x10\xf7\xd3\x94\xca\x86\xca\xb3\xca\xda\x02\xb6\x6b\xb4\x51\x13\xf0\x0f\xcc\x4d\xa0\x7f\x5b\xf0\x3b\xa0\x69\x1b\xa9\x2b\x9d\x42\x34\x75\xbd\xad\xbb\x8d\x2c\xec\xbb\x08\x51\xd4\x0e\xaa\xb2\x20\x3f\x2c\x6a\xb5\xa2\x74\x76\x9c\x65\xd9\x5d\xd1\xb4\xc8\x77\xca\xf0\x95\x15\x6c\x8d\x0d\x46\x73\xb2\xf9\xa1\x1e\x77\xf3\x7c\xda\xf1\x3c\xfc\x15\x3c\x3f\x5c\x8f\xae\x3e\xef\xc5\xf6\x86\xd8\xe1\xa1\xc4\xee\xe0\xf1\x2e\xe1\x34\xc8\x20\x65\x22\x6a\xdd\x75\x6f\x6d\x6c\x06\x53\x86\x47\x78\xc1\x70\x8a\x5c\xb5\x53\x41\x5d\x2c\x2c\x1a\x29\x0d\x22\x6f\x9a\x7e\xcc\x4c\x5a\x04\x40\x84\x2b\xc6\xb4\x88\x27\x7d\x46\x49\x12\x14\xdd\xcb\x99\x13\xa5\x29\x29\x9a\x86\xf3\x7c\x20\x65\xbc\xb4\x6a\x05\x15\x88\x8d\xf6\xab\x41\xfa\x23\x91\x9f\x8d\x8c\xa0\x68\x10\x4c\x96\x82\xf6\x2b\xdc\x0e\x7f\x25\xb7\x3f\xdd\xc3\xdb\x96\x8f\xa3\xc9\xf8\xfe\xe9\x71\xfc\xf1\xe3\x0b\x05\x9c\x1d\xdc\xda\xb7\x3d\x4d\x63\x30\xfa\x4a\x67\x67\xfe\xc1\xe3\x26\x1a\x9a\x5c\x48\x4b\x78\xcb\xab\x93\xbb\x19\xbc\x25\x4d\x6c\x3f\x2f\xae\xbb\xce\x44\x21\x30\xb5\xfe\x09\x5d\x77\x13\xff\x39\xf5\x71\x8a\x12\x1d\xc4\xe1\x9d\xd2\xb2\x6f\x1d\x1a\x1e\x4a\xf4\x18\xf9\xc6\x82\x08\xcb\x7a\x43\x78\xa5\x7c\xa8\x48\x27\x21\xe1\xd1\xf0\xde\xb5\x36\xf3\x23\x97\x63\x3e\x94\xdc\x4d\x1a\xb6\xba\x96\x37\xe6\x4d\x35\x9c\x1d\xa0\x86\x9e\xf2\x85\x5a\xb2\xce\x89\x87\x2d\x26\xce\x76\x30\x61\xf0\x66\xb9\x25\x3d\x88\x3c\x77\x81\xed\x36\xed\x43\x2b\xd7\x52\xa9\x2c\xcd\x18\x08\xe0\x81\x6a\xd4\x3f\x09\xcd\x1e\xd5\xd4\x8f\x1d\xc8\x37\xca\xd0\x18\xe4\x34\x40\x42\xd0\x7a\xa5\xe2\xb3\x37\x2a\xfe\x7d\x57\xc5\xdb\x15\xfe\x78\xda\xec\x53\x61\xd7\xa0\x1d\x3f\x90\x10\xda\x1d\x53\x03\x4f\x2f\x2f\xd9\xbf\x9d\xf6\xae\xb6\xdd\x23\xed\xe1\xf9\xf1\xff\xca\xbb\x17\xdc\x81\x99\xf7\x12\x3b\xfe\xb9\xd4\x8f\xbe\x1f\xfd\x17\x00\x00\xff\xff\xcd\x22\x17\xa9\x11\x0a\x00\x00")

func jsonWorldMiriJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonWorldMiriJson,
		"json/world/miri.json",
	)
}

func jsonWorldMiriJson() (*asset, error) {
	bytes, err := jsonWorldMiriJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/world/miri.json", size: 2577, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonWorldShadowJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xe5\x02\x04\x00\x00\xff\xff\x06\xb0\xa1\xdd\x03\x00\x00\x00")

func jsonWorldShadowJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonWorldShadowJson,
		"json/world/shadow.json",
	)
}

func jsonWorldShadowJson() (*asset, error) {
	bytes, err := jsonWorldShadowJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/world/shadow.json", size: 3, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonWorldWorldJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\xca\x4b\xcc\x4d\x55\xb2\x52\x50\xf2\xcd\x2c\xca\x54\xd2\x01\x89\x14\xa5\x26\xe6\xe4\x16\x03\xc5\x40\xf2\x40\xbe\xaf\x67\x90\x27\x9c\x07\xe4\x67\xa6\x80\xd5\x83\x44\x75\x60\x62\x30\x53\x42\x32\x52\x15\xc0\x26\x81\x25\x6a\x21\xf2\x4a\xc1\x1e\x8e\x2e\xfe\xe1\x98\x66\x40\xc5\xb1\x9a\x12\x9c\x91\x98\x92\x5f\x8e\x6a\x8e\x8f\xa7\xbb\x47\x08\xa6\x31\x10\x61\xac\xa6\xf8\x64\xa6\x67\x94\xa0\x1a\xe2\xec\xe1\xe8\x1f\x8c\x69\x08\x44\x18\xab\x21\xce\x19\x89\xf9\xc5\xa8\x86\xb8\x39\xba\x62\x1a\x01\x12\xc4\x6a\x80\x5b\x62\x2a\x54\x3b\x17\x08\xd7\x72\x01\x02\x00\x00\xff\xff\x7a\x3e\xf1\xd8\x7a\x01\x00\x00")

func jsonWorldWorldJsonBytes() ([]byte, error) {
	return bindataRead(
		_jsonWorldWorldJson,
		"json/world/world.json",
	)
}

func jsonWorldWorldJson() (*asset, error) {
	bytes, err := jsonWorldWorldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json/world/world.json", size: 378, mode: os.FileMode(420), modTime: time.Unix(1452883647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"json/aesthetic_traits.json": jsonAesthetic_traitsJson,
	"json/backgrounds.json": jsonBackgroundsJson,
	"json/entities/krajafic.json": jsonEntitiesKrajaficJson,
	"json/functional_traits.json": jsonFunctional_traitsJson,
	"json/genders.json": jsonGendersJson,
	"json/races.json": jsonRacesJson,
	"json/world/chaos.json": jsonWorldChaosJson,
	"json/world/fae.json": jsonWorldFaeJson,
	"json/world/light.json": jsonWorldLightJson,
	"json/world/miri.json": jsonWorldMiriJson,
	"json/world/shadow.json": jsonWorldShadowJson,
	"json/world/world.json": jsonWorldWorldJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"json": &bintree{nil, map[string]*bintree{
		"aesthetic_traits.json": &bintree{jsonAesthetic_traitsJson, map[string]*bintree{}},
		"backgrounds.json": &bintree{jsonBackgroundsJson, map[string]*bintree{}},
		"entities": &bintree{nil, map[string]*bintree{
			"krajafic.json": &bintree{jsonEntitiesKrajaficJson, map[string]*bintree{}},
		}},
		"functional_traits.json": &bintree{jsonFunctional_traitsJson, map[string]*bintree{}},
		"genders.json": &bintree{jsonGendersJson, map[string]*bintree{}},
		"races.json": &bintree{jsonRacesJson, map[string]*bintree{}},
		"world": &bintree{nil, map[string]*bintree{
			"chaos.json": &bintree{jsonWorldChaosJson, map[string]*bintree{}},
			"fae.json": &bintree{jsonWorldFaeJson, map[string]*bintree{}},
			"light.json": &bintree{jsonWorldLightJson, map[string]*bintree{}},
			"miri.json": &bintree{jsonWorldMiriJson, map[string]*bintree{}},
			"shadow.json": &bintree{jsonWorldShadowJson, map[string]*bintree{}},
			"world.json": &bintree{jsonWorldWorldJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

